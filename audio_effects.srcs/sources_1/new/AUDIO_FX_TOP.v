`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// AY1718 Sem 1 EE2020 Project
// Project Name: Audio Effects
// Module Name: AUDIO_FX_TOP
// Team No.: 
// Student Names: 
// Matric No.:
// Description: 
// 
// Work Distribution:
//////////////////////////////////////////////////////////////////////////////////

module AUDIO_FX_TOP(
    input CLK,            // 100MHz FPGA clock
   input butup,
    input butdown,
    input butreset,
    input [2:0] mode,
    input [8:0] sw,
    input rep,
    input [1:0] delay_option,
  //  input mix,
    
 
    
    input  J_MIC3_Pin3,   // PmodMIC3 audio input data (serial)
    output J_MIC3_Pin1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_Pin4,   // PmodMIC3 serial clock (generated by module SPI.v)
     
    output J_DA2_Pin1,    // PmodDA2 sampling clock (generated by module DA2RefComp.vhd)
    output J_DA2_Pin2,    // PmodDA2 Data_A, 12-bit speaker output (generated by module DA2RefComp.vhd)
    output J_DA2_Pin3,    // PmodDA2 Data_B, not used (generated by module DA2RefComp.vhd)
    output J_DA2_Pin4,     // PmodDA2 serial clock, 50MHz clock
    output reg [11:0] led,
    output [3:0] Anode_Activate,
    output [6:0] LED_out
    );

    //////////////////////////////////////////////////////////////////////////////////
    // Clock Divider Module: Generate necessary clocks from 100MHz FPGA CLK
    // Please create the clock divider module and instantiate it here.
      wire clk_20k;
      wire clk_50M;
 //     wire slow_CLK;
      Clock_G unitc (CLK,clk_20k,clk_50M);
      
     //////////////////////////////////////////////////////////////////////////////////
     //SPI Module: Converting serial data into a 12-bit parallel register
     //Do not change the codes in this area
       wire [11:0]MIC_in;
       SPI u1 (CLK, clk_20k, J_MIC3_Pin3, J_MIC3_Pin1, J_MIC3_Pin4, MIC_in);
   
    /////////////////////////////////////////////////////////////////////////////////////
    // Real-time Audio Effect Features
    // Please create modules to implement different features and instantiate them here   
    initial begin
    led=0;
    end
      reg [11:0] speaker_out;
      wire [11:0] delay_out;
      wire [11:0] music_out;
    wire volup,voldown, volreset;
    
    CLOCK_four unit4 (CLK,slow_CLK);
    button_signal bu1 (slow_CLK,butup,volup);
    button_signal bu2 (slow_CLK,butdown,voldown);
    button_signal bu3 (slow_CLK,butreset,volreset);
      reg [1:0]count=2'b01;
      always @ (posedge volup, posedge voldown, posedge volreset )
      begin
      count<=(volup)? 0 : (voldown)? 2:1;
      end   
            
            

    Music_Instrument unit1 (CLK,rep,sw,music_out);
    reg clock_s;
    wire clock_s_one,clock_s_two,clock_s_three;
    clock_slow unit2 (CLK,clock_s_one,clock_s_two,clock_s_three);
    always @ (posedge CLK) begin
    case(delay_option)
    2'b00:clock_s=clock_s_one;
    2'b01:clock_s=clock_s_two;
    2'b10:clock_s=clock_s_three;
    endcase
    end
    delay unit3 (clock_s,MIC_in,delay_out);
   
    always @ (posedge CLK)
    begin
    case (mode)
    3'b001:speaker_out=MIC_in>>count;
    3'b010:speaker_out=delay_out>>count;
    3'b100:speaker_out=music_out>>count;
    endcase
    if (count==0) led=12'b111111111111;
    else if (count==1) led=12'b000011111111;
    else if (count==2) led=12'b000000001111;
  //  else if (count==3) led=12'b000111111111;
   // else if (count==4) led=12'b000011111111;
   // else if (count==5) led=12'b000001111111;
  //  else if (count==6) led=12'b000000111111;
  //  else if (count==7) led=12'b000000011111;
    end
    reg seven_segment_reset=0;
//    reg detect_mode_change=0;
    
//    button_signal unit5 (slow_CLK,detect_mode_change,seven_segment_reset);
    always @ (posedge slow_CLK) begin
    seven_segment_reset=(mode==0)?1:0;
    end
    seven_segment unit6 (CLK,seven_segment_reset,Anode_Activate,LED_out);
   
 //   assign led=(speaker_out>11'b10000000000)?11'b11111111111:(speaker_out>11'b1000000000)?11'b1111111111:(speaker_out>11'b100000000)?11'b111111111:(speaker_out>11'b10000000)?11'b11111111:(speaker_out>11'b1000000)?11'b1111111:(speaker_out>11'b100000)?11'b111111:(speaker_out>11'b10000)?11'b11111:(speaker_out>11'b1000)?11'b1111:(speaker_out>11'b100)?11'b111:(speaker_out>11'b10)?11'b11:(speaker_out>11'b1)?11'b1:0;
 //   assign led=music_out;//for testing.    
      //assign speaker_out = MIC_in;
    /////////////////////////////////////////////////////////////////////////////////////
    //DAC Module: Digital-to-Analog Conversion
    //Do not change the codes in this area        
      DA2RefComp u2(clk_50M, clk_20k, speaker_out, ,1'b0, J_DA2_Pin2, J_DA2_Pin3, J_DA2_Pin4, J_DA2_Pin1,);
     //    DA2RefComp u2(clk_50M, clk_20k, speaker_out, ,1'b0, J_DA2_Pin2, J_DA2_Pin3, J_DA2_Pin4, J_DA2_Pin1,);
  //////////////////////////////////////////////////////////////////////////////////

endmodule
